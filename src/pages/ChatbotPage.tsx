import React, { useState, useEffect, useRef } from 'react';
import {
  Container,
  Typography,
  Box,
  Paper,
  TextField,
  Button,
  Avatar,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  Chip,
  Alert,
  Card,
  CardContent,
  Grid,
  Divider,
  IconButton,
  Menu,
  MenuItem,
} from '@mui/material';
import {
  SmartToy as BotIcon,
  Person as PersonIcon,
  Send as SendIcon,
  Security as SecurityIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  Lightbulb as TipIcon,
  Translate as TranslateIcon,
  Clear as ClearIcon,
  Psychology as PsychologyIcon,
} from '@mui/icons-material';
import { motion, AnimatePresence } from 'framer-motion';

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  type?: 'text' | 'tip' | 'warning' | 'analysis';
  metadata?: any;
}

const ChatbotPage: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [language, setLanguage] = useState('en');
  const [langAnchorEl, setLangAnchorEl] = useState<null | HTMLElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const languages = [
    { code: 'en', name: 'English', flag: 'ЁЯЗ║ЁЯЗ╕' },
    { code: 'hi', name: 'рд╣рд┐рдВрджреА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'bn', name: 'ржмрж╛ржВрж▓рж╛', flag: 'ЁЯЗзЁЯЗй' },
    { code: 'ta', name: 'родрооро┐ро┤рпН', flag: 'ЁЯЗоЁЯЗ│' },
  ];

  // Predefined responses for the AI mentor
  const responses = {
    en: {
      welcome: "ЁЯдЦ Hello! I'm your AI Security Mentor. I'm here to help you stay safe online. You can ask me about phishing, password security, safe browsing, or any cybersecurity topic!",
      phishing: "ЁЯОг Phishing is a cyber attack where attackers impersonate legitimate organizations to steal your personal information. Here are key signs to watch for:\n\nтАв Urgent language demanding immediate action\nтАв Suspicious sender email addresses\nтАв Generic greetings like 'Dear Customer'\nтАв Links that don't match the claimed destination\nтАв Requests for sensitive information via email\n\nAlways verify independently before taking action!",
      password: "ЁЯФР Strong passwords are your first line of defense! Here's how to create them:\n\nтАв Use at least 12 characters\nтАв Mix uppercase, lowercase, numbers, and symbols\nтАв Avoid personal information\nтАв Use unique passwords for each account\nтАв Consider using a password manager\nтАв Enable two-factor authentication when available\n\nRemember: A strong password is like a strong lock on your digital door!",
      scam: "тЪая╕П Common scam warning signs:\n\nтАв Too-good-to-be-true offers\nтАв Pressure to act immediately\nтАв Requests for upfront payments\nтАв Poor grammar and spelling\nтАв Unsolicited contact\nтАв Requests for personal/financial information\n\nWhen in doubt, verify through official channels. Trust your instincts!",
      safe_browsing: "ЁЯМР Stay safe while browsing:\n\nтАв Look for HTTPS (padlock icon) on websites\nтАв Avoid clicking suspicious links\nтАв Keep your browser updated\nтАв Use reputable antivirus software\nтАв Be cautious with downloads\nтАв Check website URLs carefully\nтАв Don't trust pop-up warnings\n\nYour browser is your gateway to the internet - keep it secure!",
      tips: [
        "ЁЯТб Daily Tip: Always log out of accounts when using public computers",
        "ЁЯФТ Security Reminder: Regular software updates patch security vulnerabilities",
        "ЁЯУ▒ Mobile Safety: Be cautious when connecting to public Wi-Fi networks",
        "ЁЯТ│ Financial Safety: Monitor your bank statements regularly for unauthorized transactions",
        "ЁЯУз Email Security: Be suspicious of unexpected attachments, even from known contacts"
      ]
    },
    hi: {
      welcome: "ЁЯдЦ рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рд╕реБрд░рдХреНрд╖рд╛ рдЧреБрд░реБ рд╣реВрдВред рдореИрдВ рдЖрдкрдХреЛ рдСрдирд▓рд╛рдЗрди рд╕реБрд░рдХреНрд╖рд┐рдд рд░рд╣рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред рдЖрдк рдореБрдЭрд╕реЗ рдлрд┐рд╢рд┐рдВрдЧ, рдкрд╛рд╕рд╡рд░реНрдб рд╕реБрд░рдХреНрд╖рд╛, рд╕реБрд░рдХреНрд╖рд┐рдд рдмреНрд░рд╛рдЙрдЬрд╝рд┐рдВрдЧ, рдпрд╛ рдХрд┐рд╕реА рднреА рд╕рд╛рдЗрдмрд░ рд╕реБрд░рдХреНрд╖рд╛ рд╡рд┐рд╖рдп рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ!",
      phishing: "ЁЯОг рдлрд┐рд╢рд┐рдВрдЧ рдПрдХ рд╕рд╛рдЗрдмрд░ рд╣рдорд▓рд╛ рд╣реИ рдЬрд╣рд╛рдВ рд╣рдорд▓рд╛рд╡рд░ рдЖрдкрдХреА рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЬрд╛рдирдХрд╛рд░реА рдЪреБрд░рд╛рдиреЗ рдХреЗ рд▓рд┐рдП рд╡реИрдз рд╕рдВрдЧрдардиреЛрдВ рдХрд╛ рд░реВрдк рдзрд╛рд░рдг рдХрд░рддреЗ рд╣реИрдВред рджреЗрдЦрдиреЗ рдпреЛрдЧреНрдп рдореБрдЦреНрдп рд╕рдВрдХреЗрдд:\n\nтАв рддрддреНрдХрд╛рд▓ рдХрд╛рд░реНрд░рд╡рд╛рдИ рдХреА рдорд╛рдВрдЧ рдХрд░рдиреЗ рд╡рд╛рд▓реА рднрд╛рд╖рд╛\nтАв рд╕рдВрджрд┐рдЧреНрдз рднреЗрдЬрдиреЗ рд╡рд╛рд▓реЗ рдИрдореЗрд▓ рдкрддреЗ\nтАв 'рдкреНрд░рд┐рдп рдЧреНрд░рд╛рд╣рдХ' рдЬреИрд╕реЗ рд╕рд╛рдорд╛рдиреНрдп рдЕрднрд┐рд╡рд╛рджрди\nтАв рд▓рд┐рдВрдХ рдЬреЛ рджрд╛рд╡рд╛ рдХрд┐рдП рдЧрдП рдЧрдВрддрд╡реНрдп рд╕реЗ рдореЗрд▓ рдирд╣реАрдВ рдЦрд╛рддреЗ\nтАв рдИрдореЗрд▓ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рд╕рдВрд╡реЗрджрдирд╢реАрд▓ рдЬрд╛рдирдХрд╛рд░реА рдХреА рдорд╛рдВрдЧ\n\nрдХреЛрдИ рднреА рдХрд╛рд░реНрд░рд╡рд╛рдИ рдХрд░рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рд╣рдореЗрд╢рд╛ рд╕реНрд╡рддрдВрддреНрд░ рд░реВрдк рд╕реЗ рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ!",
      password: "ЁЯФР рдордЬрдмреВрдд рдкрд╛рд╕рд╡рд░реНрдб рдЖрдкрдХреА рдкрд╣рд▓реА рд░рдХреНрд╖рд╛ рдкрдВрдХреНрддрд┐ рд╣реИрдВ! рдЙрдиреНрд╣реЗрдВ рдмрдирд╛рдиреЗ рдХрд╛ рддрд░реАрдХрд╛:\n\nтАв рдХрдо рд╕реЗ рдХрдо 12 рд╡рд░реНрдг рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\nтАв рдмрдбрд╝реЗ рдЕрдХреНрд╖рд░, рдЫреЛрдЯреЗ рдЕрдХреНрд╖рд░, рд╕рдВрдЦреНрдпрд╛ рдФрд░ рдкреНрд░рддреАрдХреЛрдВ рдХреЛ рдорд┐рд▓рд╛рдПрдВ\nтАв рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЬрд╛рдирдХрд╛рд░реА рд╕реЗ рдмрдЪреЗрдВ\nтАв рд╣рд░ рдЦрд╛рддреЗ рдХреЗ рд▓рд┐рдП рдЕрд▓рдЧ рдкрд╛рд╕рд╡рд░реНрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\nтАв рдкрд╛рд╕рд╡рд░реНрдб рдореИрдиреЗрдЬрд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ\nтАв рдЬрдм рдЙрдкрд▓рдмреНрдз рд╣реЛ рддреЛ рджреЛ-рдХрд╛рд░рдХ рдкреНрд░рдорд╛рдгреАрдХрд░рдг рд╕рдХреНрд╖рдо рдХрд░реЗрдВ\n\nрдпрд╛рдж рд░рдЦреЗрдВ: рдПрдХ рдордЬрдмреВрдд рдкрд╛рд╕рд╡рд░реНрдб рдЖрдкрдХреЗ рдбрд┐рдЬрд┐рдЯрд▓ рджрд░рд╡рд╛рдЬреЗ рдкрд░ рдПрдХ рдордЬрдмреВрдд рддрд╛рд▓рд╛ рдХреА рддрд░рд╣ рд╣реИ!",
      scam: "тЪая╕П рд╕рд╛рдорд╛рдиреНрдп рдШреЛрдЯрд╛рд▓рд╛ рдЪреЗрддрд╛рд╡рдиреА рд╕рдВрдХреЗрдд:\n\nтАв рдмрд╣реБрдд рдЕрдЪреНрдЫреЗ рд▓рдЧрдиреЗ рд╡рд╛рд▓реЗ рдкреНрд░рд╕реНрддрд╛рд╡\nтАв рддреБрд░рдВрдд рдХрд╛рд░реНрдп рдХрд░рдиреЗ рдХрд╛ рджрдмрд╛рд╡\nтАв рдЕрдЧреНрд░рд┐рдо рднреБрдЧрддрд╛рди рдХреА рдорд╛рдВрдЧ\nтАв рдЧрд▓рдд рд╡реНрдпрд╛рдХрд░рдг рдФрд░ рд╡рд░реНрддрдиреА\nтАв рдЕрд╡рд╛рдВрдЫрд┐рдд рд╕рдВрдкрд░реНрдХ\nтАв рд╡реНрдпрдХреНрддрд┐рдЧрдд/рд╡рд┐рддреНрддреАрдп рдЬрд╛рдирдХрд╛рд░реА рдХреА рдорд╛рдВрдЧ\n\nрд╕рдВрджреЗрд╣ рд╣реЛрдиреЗ рдкрд░, рдЖрдзрд┐рдХрд╛рд░рд┐рдХ рдЪреИрдирд▓реЛрдВ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВред рдЕрдкрдиреА рд╕рд╣рдЬ рд╢рдХреНрддрд┐ рдкрд░ рднрд░реЛрд╕рд╛ рдХрд░реЗрдВ!",
      safe_browsing: "ЁЯМР рдмреНрд░рд╛рдЙрдЬрд╝рд┐рдВрдЧ рдХрд░рддреЗ рд╕рдордп рд╕реБрд░рдХреНрд╖рд┐рдд рд░рд╣реЗрдВ:\n\nтАв рд╡реЗрдмрд╕рд╛рдЗрдЯреЛрдВ рдкрд░ HTTPS (рдкреИрдбрд▓реЙрдХ рдЖрдЗрдХрди) рдХреА рддрд▓рд╛рд╢ рдХрд░реЗрдВ\nтАв рд╕рдВрджрд┐рдЧреНрдз рд▓рд┐рдВрдХ рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рдиреЗ рд╕реЗ рдмрдЪреЗрдВ\nтАв рдЕрдкрдирд╛ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдЕрдкрдбреЗрдЯ рд░рдЦреЗрдВ\nтАв рдкреНрд░рддрд┐рд╖реНрдард┐рдд рдПрдВрдЯреАрд╡рд╛рдпрд░рд╕ рд╕реЙрдлрд╝реНрдЯрд╡реЗрдпрд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\nтАв рдбрд╛рдЙрдирд▓реЛрдб рдХреЗ рд╕рд╛рде рд╕рд╛рд╡рдзрд╛рди рд░рд╣реЗрдВ\nтАв рд╡реЗрдмрд╕рд╛рдЗрдЯ URLs рдХреЛ рдзреНрдпрд╛рди рд╕реЗ рдЬрд╛рдВрдЪреЗрдВ\nтАв рдкреЙрдк-рдЕрдк рдЪреЗрддрд╛рд╡рдирд┐рдпреЛрдВ рдкрд░ рднрд░реЛрд╕рд╛ рди рдХрд░реЗрдВ\n\nрдЖрдкрдХрд╛ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдЗрдВрдЯрд░рдиреЗрдЯ рдХрд╛ рдЖрдкрдХрд╛ рдЧреЗрдЯрд╡реЗ рд╣реИ - рдЗрд╕реЗ рд╕реБрд░рдХреНрд╖рд┐рдд рд░рдЦреЗрдВ!",
      tips: [
        "ЁЯТб рджреИрдирд┐рдХ рд╕реБрдЭрд╛рд╡: рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рдХрдВрдкреНрдпреВрдЯрд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╕рдордп рд╣рдореЗрд╢рд╛ рд▓реЙрдЧ рдЖрдЙрдЯ рдХрд░реЗрдВ",
        "ЁЯФТ рд╕реБрд░рдХреНрд╖рд╛ рдЕрдиреБрд╕реНрдорд╛рд░рдХ: рдирд┐рдпрдорд┐рдд рд╕реЙрдлрд╝реНрдЯрд╡реЗрдпрд░ рдЕрдкрдбреЗрдЯ рд╕реБрд░рдХреНрд╖рд╛ рдХрдордЬреЛрд░рд┐рдпреЛрдВ рдХреЛ рдареАрдХ рдХрд░рддреЗ рд╣реИрдВ",
        "ЁЯУ▒ рдореЛрдмрд╛рдЗрд▓ рд╕реБрд░рдХреНрд╖рд╛: рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ Wi-Fi рдиреЗрдЯрд╡рд░реНрдХ рд╕реЗ рдХрдиреЗрдХреНрдЯ рд╣реЛрддреЗ рд╕рдордп рд╕рд╛рд╡рдзрд╛рди рд░рд╣реЗрдВ",
        "ЁЯТ│ рд╡рд┐рддреНрддреАрдп рд╕реБрд░рдХреНрд╖рд╛: рдЕрдирдзрд┐рдХреГрдд рд▓реЗрдирджреЗрди рдХреЗ рд▓рд┐рдП рдирд┐рдпрдорд┐рдд рд░реВрдк рд╕реЗ рдЕрдкрдиреЗ рдмреИрдВрдХ рд╕реНрдЯреЗрдЯрдореЗрдВрдЯ рдХреА рдирд┐рдЧрд░рд╛рдиреА рдХрд░реЗрдВ",
        "ЁЯУз рдИрдореЗрд▓ рд╕реБрд░рдХреНрд╖рд╛: рдЬреНрдЮрд╛рдд рд╕рдВрдкрд░реНрдХреЛрдВ рд╕реЗ рднреА рдЕрдкреНрд░рддреНрдпрд╛рд╢рд┐рдд рдЕрдЯреИрдЪрдореЗрдВрдЯ рдкрд░ рд╕рдВрджреЗрд╣ рдХрд░реЗрдВ"
      ]
    }
  };

  const quickActions = [
    { label: 'Check if this is phishing', icon: <SecurityIcon />, query: 'phishing' },
    { label: 'Password security tips', icon: <TipIcon />, query: 'password' },
    { label: 'Safe browsing guide', icon: <InfoIcon />, query: 'safe browsing' },
    { label: 'Scam prevention', icon: <WarningIcon />, query: 'scam' },
  ];

  useEffect(() => {
    // Send welcome message on component mount
    const welcomeMessage: Message = {
      id: 'welcome',
      content: responses[language as keyof typeof responses]?.welcome || responses.en.welcome,
      sender: 'bot',
      timestamp: new Date(),
      type: 'text'
    };
    setMessages([welcomeMessage]);
  }, [language]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = async (messageContent?: string) => {
    const content = messageContent || inputMessage.trim();
    if (!content) return;

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      content: content,
      sender: 'user',
      timestamp: new Date(),
      type: 'text'
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate bot response delay
    setTimeout(() => {
      const botResponse = generateBotResponse(content);
      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1000 + Math.random() * 1000);
  };

  const generateBotResponse = (userInput: string): Message => {
    const input = userInput.toLowerCase();
    const currentLanguageResponses = responses[language as keyof typeof responses] || responses.en;
    
    let responseContent = '';
    let responseType: 'text' | 'tip' | 'warning' | 'analysis' = 'text';

    if (input.includes('phishing') || input.includes('рдлрд┐рд╢рд┐рдВрдЧ')) {
      responseContent = currentLanguageResponses.phishing || responses.en.phishing;
      responseType = 'warning';
    } else if (input.includes('password') || input.includes('рдкрд╛рд╕рд╡рд░реНрдб')) {
      responseContent = currentLanguageResponses.password || responses.en.password;
      responseType = 'tip';
    } else if (input.includes('scam') || input.includes('рдзреЛрдЦрд╛рдзрдбрд╝реА')) {
      responseContent = currentLanguageResponses.scam || responses.en.scam;
      responseType = 'warning';
    } else if (input.includes('browsing') || input.includes('рдмреНрд░рд╛рдЙрдЬрд╝рд┐рдВрдЧ')) {
      responseContent = currentLanguageResponses.safe_browsing || responses.en.safe_browsing;
      responseType = 'tip';
    } else if (input.includes('tip') || input.includes('рд╕реБрдЭрд╛рд╡')) {
      const tips = currentLanguageResponses.tips || responses.en.tips;
      responseContent = tips[Math.floor(Math.random() * tips.length)];
      responseType = 'tip';
    } else if (input.includes('hello') || input.includes('hi') || input.includes('рдирдорд╕реНрддреЗ')) {
      responseContent = "ЁЯСЛ Hello! How can I help you stay secure today? You can ask me about phishing, passwords, safe browsing, or any cybersecurity topic.";
    } else if (input.includes('analyze') || input.includes('check')) {
      responseContent = "ЁЯФН I can help analyze suspicious content! Please share the text, URL, or email you'd like me to examine for potential threats.";
      responseType = 'analysis';
    } else {
      // Default response with suggestions
      responseContent = "ЁЯдФ I understand you're asking about cybersecurity. Here are some topics I can help with:\n\nтАв Phishing identification\nтАв Password security\nтАв Safe browsing practices\nтАв Scam prevention\nтАв Threat analysis\n\nPlease ask me about any of these topics or share specific content you'd like me to analyze!";
    }

    return {
      id: Date.now().toString(),
      content: responseContent,
      sender: 'bot',
      timestamp: new Date(),
      type: responseType
    };
  };

  const handleLanguageChange = (langCode: string) => {
    setLanguage(langCode);
    setLangAnchorEl(null);
  };

  const clearChat = () => {
    const welcomeMessage: Message = {
      id: 'welcome-new',
      content: responses[language as keyof typeof responses]?.welcome || responses.en.welcome,
      sender: 'bot',
      timestamp: new Date(),
      type: 'text'
    };
    setMessages([welcomeMessage]);
  };

  const getMessageIcon = (type?: string) => {
    switch (type) {
      case 'warning': return <WarningIcon sx={{ color: 'warning.main' }} />;
      case 'tip': return <TipIcon sx={{ color: 'success.main' }} />;
      case 'analysis': return <PsychologyIcon sx={{ color: 'info.main' }} />;
      default: return <BotIcon sx={{ color: 'primary.main' }} />;
    }
  };

  const getMessageColor = (type?: string) => {
    switch (type) {
      case 'warning': return 'warning.light';
      case 'tip': return 'success.light';
      case 'analysis': return 'info.light';
      default: return 'grey.100';
    }
  };

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <Typography variant="h3" component="h1" gutterBottom textAlign="center" sx={{ mb: 2 }}>
          ЁЯдЦ AI Security Mentor
        </Typography>
        <Typography variant="h6" textAlign="center" color="text.secondary" sx={{ mb: 4 }}>
          Your personal cybersecurity assistant - ask me anything about staying safe online!
        </Typography>
      </motion.div>

      <Grid container spacing={4}>
        <Grid item xs={12} lg={8}>
          <Card sx={{ height: '70vh', display: 'flex', flexDirection: 'column', borderRadius: 3 }}>
            {/* Chat Header */}
            <Box
              sx={{
                p: 2,
                borderBottom: 1,
                borderColor: 'divider',
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                color: 'white',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                borderTopLeftRadius: 12,
                borderTopRightRadius: 12,
              }}
            >
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <Avatar sx={{ bgcolor: 'rgba(255,255,255,0.2)', mr: 2 }}>
                  <BotIcon />
                </Avatar>
                <Box>
                  <Typography variant="h6">PhishGuard AI Mentor</Typography>
                  <Typography variant="body2" sx={{ opacity: 0.8 }}>
                    Online тАв Ready to help
                  </Typography>
                </Box>
              </Box>
              <Box>
                <IconButton
                  color="inherit"
                  onClick={(e) => setLangAnchorEl(e.currentTarget)}
                >
                  <TranslateIcon />
                </IconButton>
                <IconButton color="inherit" onClick={clearChat}>
                  <ClearIcon />
                </IconButton>
              </Box>
            </Box>

            {/* Messages Area */}
            <Box
              sx={{
                flexGrow: 1,
                overflow: 'auto',
                p: 2,
                bgcolor: 'background.default',
              }}
            >
              <List>
                <AnimatePresence>
                  {messages.map((message, index) => (
                    <motion.div
                      key={message.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3, delay: index * 0.1 }}
                    >
                      <ListItem
                        alignItems="flex-start"
                        sx={{
                          flexDirection: message.sender === 'user' ? 'row-reverse' : 'row',
                          mb: 2,
                        }}
                      >
                        <ListItemAvatar
                          sx={{
                            minWidth: message.sender === 'user' ? 0 : 56,
                            mr: message.sender === 'user' ? 0 : 2,
                            ml: message.sender === 'user' ? 2 : 0,
                          }}
                        >
                          <Avatar
                            sx={{
                              bgcolor: message.sender === 'user' ? 'primary.main' : 'secondary.main',
                            }}
                          >
                            {message.sender === 'user' ? <PersonIcon /> : getMessageIcon(message.type)}
                          </Avatar>
                        </ListItemAvatar>
                        <Paper
                          elevation={1}
                          sx={{
                            p: 2,
                            maxWidth: '80%',
                            bgcolor: message.sender === 'user' ? 'primary.main' : getMessageColor(message.type),
                            color: message.sender === 'user' ? 'white' : 'text.primary',
                            borderRadius: 2,
                            whiteSpace: 'pre-line',
                          }}
                        >
                          <Typography variant="body1">{message.content}</Typography>
                          <Typography
                            variant="caption"
                            sx={{
                              display: 'block',
                              mt: 1,
                              opacity: 0.7,
                            }}
                          >
                            {message.timestamp.toLocaleTimeString()}
                          </Typography>
                        </Paper>
                      </ListItem>
                    </motion.div>
                  ))}
                </AnimatePresence>

                {isTyping && (
                  <ListItem>
                    <ListItemAvatar>
                      <Avatar sx={{ bgcolor: 'secondary.main' }}>
                        <BotIcon />
                      </Avatar>
                    </ListItemAvatar>
                    <Paper elevation={1} sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 2 }}>
                      <Typography variant="body2" sx={{ fontStyle: 'italic' }}>
                        AI Mentor is typing...
                      </Typography>
                    </Paper>
                  </ListItem>
                )}
              </List>
              <div ref={messagesEndRef} />
            </Box>

            {/* Input Area */}
            <Box
              sx={{
                p: 2,
                borderTop: 1,
                borderColor: 'divider',
                bgcolor: 'background.paper',
                borderBottomLeftRadius: 12,
                borderBottomRightRadius: 12,
              }}
            >
              <Box sx={{ display: 'flex', gap: 1 }}>
                <TextField
                  fullWidth
                  variant="outlined"
                  placeholder="Ask me about cybersecurity..."
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={(e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                      e.preventDefault();
                      handleSendMessage();
                    }
                  }}
                  multiline
                  maxRows={3}
                  size="small"
                />
                <Button
                  variant="contained"
                  onClick={() => handleSendMessage()}
                  disabled={!inputMessage.trim()}
                  sx={{ minWidth: 60 }}
                >
                  <SendIcon />
                </Button>
              </Box>
            </Box>
          </Card>
        </Grid>

        <Grid item xs={12} lg={4}>
          {/* Quick Actions */}
          <Card sx={{ mb: 3, borderRadius: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                ЁЯЪА Quick Actions
              </Typography>
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                {quickActions.map((action, index) => (
                  <Button
                    key={index}
                    variant="outlined"
                    startIcon={action.icon}
                    onClick={() => handleSendMessage(action.query)}
                    sx={{
                      justifyContent: 'flex-start',
                      textAlign: 'left',
                      borderRadius: 2,
                    }}
                  >
                    {action.label}
                  </Button>
                ))}
              </Box>
            </CardContent>
          </Card>

          {/* Security Tips */}
          <Card sx={{ mb: 3, borderRadius: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                ЁЯТб Daily Security Tips
              </Typography>
              <List dense>
                <ListItem>
                  <ListItemText
                    primary="Enable 2FA"
                    secondary="Add an extra layer of security to your accounts"
                  />
                </ListItem>
                <Divider />
                <ListItem>
                  <ListItemText
                    primary="Check URLs"
                    secondary="Always verify website addresses before entering data"
                  />
                </ListItem>
                <Divider />
                <ListItem>
                  <ListItemText
                    primary="Update Software"
                    secondary="Keep your apps and OS updated for security patches"
                  />
                </ListItem>
              </List>
            </CardContent>
          </Card>

          {/* Statistics */}
          <Card sx={{ borderRadius: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                ЁЯУК Your Security Progress
              </Typography>
              <Box sx={{ textAlign: 'center', py: 2 }}>
                <Typography variant="h4" color="primary" sx={{ fontWeight: 'bold' }}>
                  85%
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  Security Knowledge Score
                </Typography>
              </Box>
              <Divider sx={{ my: 2 }} />
              <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                <Box sx={{ textAlign: 'center' }}>
                  <Typography variant="h6" color="success.main">12</Typography>
                  <Typography variant="caption">Threats Avoided</Typography>
                </Box>
                <Box sx={{ textAlign: 'center' }}>
                  <Typography variant="h6" color="info.main">8</Typography>
                  <Typography variant="caption">Tips Learned</Typography>
                </Box>
                <Box sx={{ textAlign: 'center' }}>
                  <Typography variant="h6" color="warning.main">3</Typography>
                  <Typography variant="caption">Quizzes Passed</Typography>
                </Box>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Language Menu */}
      <Menu
        anchorEl={langAnchorEl}
        open={Boolean(langAnchorEl)}
        onClose={() => setLangAnchorEl(null)}
      >
        {languages.map((lang) => (
          <MenuItem
            key={lang.code}
            onClick={() => handleLanguageChange(lang.code)}
            selected={language === lang.code}
          >
            <Typography sx={{ mr: 1 }}>{lang.flag}</Typography>
            {lang.name}
          </MenuItem>
        ))}
      </Menu>
    </Container>
  );
};

export default ChatbotPage;